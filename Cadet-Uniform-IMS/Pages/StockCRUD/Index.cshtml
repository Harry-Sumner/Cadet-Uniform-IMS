@page
@model Cadet_Uniform_IMS.Pages.StockCRUD.IndexModel

@{
    ViewData["Title"] = "Browse";
}

<head>
    <link rel="stylesheet" href="~/css/StockPage.css" />
</head>
<body>
    @if (!string.IsNullOrEmpty(Model.Message))
    {
        <div class="alert alert-success" role="alert">
            @Model.Message
        </div>
    }
    @* Code adapted from (W3Schools.com, n.d.-c) *@
    <div id="btn_container">
        <button class="btn active" onclick="filterSelection('all')"> Show all</button>
        @foreach (var type in Model.UniformTypes)
        {
            <button class="btn" onclick="filterSelection('@type.TypeName')">@type.TypeName</button>
        }
    </div>

    <br />
    <div class="body--search--container" style="display: flex; gap: 10px; align-items: center; flex-wrap: wrap;">
        <input type="text" id="clientSearch" placeholder="Search uniform by name..." style="max-width: 250px; padding: 8px;" onkeyup="searchUniforms()" />

        <form method="get" style="display: flex; gap: 10px; align-items: center;">
            <select asp-for="SelectedSize" id="sizeFilter" name="SelectedSize"
                    style="max-width: 250px; padding: 8px;" onchange="this.form.submit()">
                <option value="">All Sizes</option>
                @foreach (var type in Model.UniformTypes)
                {
                    var sizeAttributes = Model.SizeAttributes.Where(sa => sa.TypeID == type.TypeID);

                    foreach (var attr in sizeAttributes)
                    {
                        var sizes = Model.Stock
                        .Where(s => s.Available > 0)
                        .Join(Model.StockSizes,
                        stock => stock.StockID,
                        ss => ss.StockID,
                        (stock, ss) => new { ss.Size, ss.AttributeID })
                        .Where(x => x.AttributeID == attr.AttributeID)
                        .Select(x => x.Size)
                        .Distinct()
                        .OrderBy(size => size)
                        .ToList();

                        if (sizes.Any())
                        {
                            <optgroup label="@type.TypeName - @attr.AttributeName" data-type="@type.TypeName">
                                @foreach (var size in sizes)
                                {
                                    <option value="@size" selected="@(Model.SelectedSize == size ? "selected" : null)">
                                        @size
                                    </option>
                                }
                            </optgroup>
                        }
                    }
                }
            </select>

            <label>
                <input type="checkbox" name="FilterByUserMeasurements" value="true"
                @(Model.FilterByUserMeasurements ? "checked" : "")
                       onchange="this.form.submit()" />
                My Size Only
            </label>
        </form>
        <a asp-page="/StockCRUD/Index">
            <button type="button">Clear</button>
        </a>
    </div>

    <div class="uniform">
        @foreach (var item in Model.Stock.Where(i=> i.Available > 0))
        {
            var uniform = Model.Uniform.FirstOrDefault(i => i.UniformID == item.UniformID);
            if (uniform != null)
            {
                <div class="item @(string.Join(" ", Model.UniformTypes.Where(i => i.TypeID == uniform.TypeID).Select(t => t.TypeName)))">
                    <div class="content">
                        @{
                            try
                            {
                                <img src="@string.Format("data:image/jpg;base64,{0}", Convert.ToBase64String(uniform.ImageData))" alt="@uniform.Name" style="width:12vw; height:15vw; max-height: 250px; max-width: 400px" />
                            }
                            catch
                            {
                                <img src="~/images/empty.png" alt="No Image Provided" style="width:12vw; height:15vw; max-height: 250px; max-width: 400px" />
                            }
                        }
                        <h4>@uniform.Name</h4>

                        @foreach (var attributes in Model.SizeAttributes.Where(i => i.TypeID == uniform.TypeID))
                        {
                            Model.countAttributes++;
                            var sizes = string.Join(", ", Model.StockSizes
                            .Where(i => i.StockID == item.StockID && i.AttributeID == attributes.AttributeID)
                            .Select(s => s.Size)
                            .Distinct());

                            <h5>@attributes.AttributeName: @sizes</h5>
                        }

                        @while (Model.countAttributes < 3)
                        {
                            <h5 style="color: transparent;">H</h5>
                            Model.countAttributes++;
                        }

                        @if (Model.countAttributes == 3)
                        {
                            Model.countAttributes = 0;
                        }

                        <p style="color:darkgreen">Quantity: @item.Available</p>
                    </div>

                    <form asp-page-handler="Add" asp-route-stockID="@item.StockID" method="post">
                        <button class="submit">Add</button>
                    </form>
                </div>
            }
        }
    </div>
    @* End of code adapted *@
    <script>
        filterSelection("all");

        function filterSelection(c) {
            var x = document.getElementsByClassName("item");

            if (c == "all") c = "";

            for (let i = 0; i < x.length; i++) {
                RemoveClass(x[i], "display");
                if (x[i].className.indexOf(c) > -1) AddClass(x[i], "display");
            }

            const sizeGroups = document.querySelectorAll("#sizeFilter optgroup");
            sizeGroups.forEach(group => {
                const groupType = group.getAttribute("data-type");
                group.hidden = c && groupType !== c;
            });

            document.getElementById("sizeFilter").selectedIndex = 0;

            var btns = document.getElementsByClassName("btn");
            for (let i = 0; i < btns.length; i++) {
                btns[i].classList.remove("active");
            }

            if (!c) {
                document.querySelector(".btn[onclick*='all']").classList.add("active");
            } else {
                var matched = Array.from(btns).find(btn => btn.textContent.trim() === c);
                if (matched) matched.classList.add("active");
            }

            document.getElementById('clientSearch').value = "";
            searchUniforms();
        }

        function AddClass(element, name) {
            var arr1 = element.className.split(" ");
            var arr2 = name.split(" ");
            for (let i = 0; i < arr2.length; i++) {
                if (arr1.indexOf(arr2[i]) == -1) {
                    element.className += " " + arr2[i];
                }
            }
        }

        function RemoveClass(element, name) {
            var arr1 = element.className.split(" ");
            var arr2 = name.split(" ");
            for (let i = 0; i < arr2.length; i++) {
                while (arr1.indexOf(arr2[i]) > -1) {
                    arr1.splice(arr1.indexOf(arr2[i]), 1);
                }
            }
            element.className = arr1.join(" ");
        }

        function searchUniforms() {
            const input = document.getElementById('clientSearch');
            const filter = input.value.toLowerCase();
            const items = document.querySelectorAll('.item');

            items.forEach(item => {
                const name = item.querySelector('h4')?.textContent.toLowerCase() || '';
                const isVisible = item.classList.contains('display');

                item.style.display = (isVisible && name.includes(filter)) ? '' : 'none';
            });
        }
    </script>
</body>